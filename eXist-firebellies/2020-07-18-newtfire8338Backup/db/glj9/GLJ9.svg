xquery version "3.1";
declare default element namespace "http://www.w3.org/2000/svg";
declare namespace tei="http://www.tei-c.org/ns/1.0";

declare variable $coll := collection('/db/mitford');
declare variable $letColl := collection('/db/mitford/letters');
declare variable $letFiles := $letColl/*;
declare variable $letDates := $letColl//tei:teiHeader//tei:msDesc//tei:head/tei:date/@when/tokenize(string(), '-')[1];

(:
let $distYears := distinct-values($letDates)
for $distYear in $distYears
order by $distYear
return concat($distYear, ', ')
<--! JMH: I am using the direct output later to see my svg. So my use of concat() is just for readablity in that view! -->
:)

declare variable $distDates := distinct-values($letDates);
declare variable $maxYear := xs:integer(max($distDates));
declare variable $minYear := xs:integer(min($distDates));
declare variable $yearNum := xs:integer($maxYear) - xs:integer($minYear);
declare variable $lineLength := $yearNum * 365;
declare variable $HaydonLetters := $letColl[descendant::tei:titleStmt/tei:title/tei:persName/@ref="#Haydon"];
declare variable $HaydonDates :=$HaydonLetters//tei:teiHeader//tei:msDesc//tei:head/tei:date/@when/string(); 
declare variable $minHaydon := min($HaydonDates);
declare variable $maxHaydon := max($HaydonDates);
declare variable $minHaydonYear := xs:integer(tokenize($minHaydon, '-')[1]);
declare variable $svgHaydonSpan := ($minHaydon - $maxHaydon)* 365;
declare variable $svgHaydonMinYearPlot := ($minHaydonYear - $minYear)* 365;
declare variable $svgHaydonMaxYearPlot := ($maxYear - $maxHaydonYear)* 365;
declare variable $minHaydonDayAdd := xs:integer(format-date($minHaydon, '[d]'));
declare variable $maxHaydonDayAdd := xs:integer(format-date($maxHaydon, '[d]'));
declare variable $svgMinHaydonDate := $svgMinHaydonYr + $minHaydonAdd;
declare variable $svgMaxHaydonDate := $svgMaxHaydonYr + $maxHaydonDayAdd;
$svgMaxHaydonDate


(:  :declare variable $ThisFileContent := 
<svg width="500" height="3000">
   <g transform="translate(30, 100)">
      <line x1="100" y1="0" x2="100" y2="{$lineLength}" stroke="maroon" stroke-width="5"/>  
      
         {
         for $i in (0 to $yearNum)
                return
                 <g>
                <line x1="50" y1="{$i*365}" x2="115" y2="{$i*365}" stroke="black" stroke-width="3"/>
                <text x="120" y="{($i*365)+ 5}">{$minYear + $i}</text>
                <!-- I noticed that this had happened in my old submissions too, so I went ahead and added the "+5 buffer" to make sure the text was level with the lines on the graph.-->
                <circle cx="50" cy="{$i*365}" r="{count($letDates[contains(., $minYear + $i)])*2}" stroke="maroon" fill="lightgrey" stroke-width="4"/>
                <!-- Since I plotted this with circles, I wanted to note a short fix I made here for visiblity. Since the circle is generated by radius, if you multiply it by 2 that would be the full diameter of the circle. This makes all the circles larger and does not disrupt the information. -->
            </g>
         }
         
   </g>
</svg>;

let $filename := "ClassExTimeLineP1.svg"
let $doc-db-uri := xmldb:store("/db/jonhoranic", $filename, $ThisFileContent)
return $doc-db-uri
(: Output at http://newtfire.org:8338/exist/rest/db/glj9/ClassExTimeLineP1.svg :)
:)
