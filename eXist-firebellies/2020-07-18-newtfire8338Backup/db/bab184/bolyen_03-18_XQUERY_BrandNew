xquery version "3.1";

(: With a little guidance from Dr B, this program finds instances of shared tempos between Brand New's entire discography:)
(: At present our eXide db is out of date with our most recent round of XML, so the lion's share of songs have a placeholder bpm of '1'. Therefore, we return a ton of unrelated songs as though they are connected. This is just a matter of finishing some pretty tedious listening and XML encoding. Once our data is up-to-date, this code should return some interesting results.:)

(: Possible future modifications of this code could include visualizing harmonic/lyrical similarities :)

(: Begin file :)
declare variable $fileContent := string-join(

(: discog = discography
   Steps through file, then into the album entity and returns a distinct string. :)
let $discog := collection('/db/brandnew/XML/Albums')
let $albums := $discog//album/string()! normalize-space()
let $distAlbums := $albums => distinct-values()

(: Used long names for 'for' loops because I'm special. :] 
 : Finds title elements where the following sibling matches the index of distinct albums, returns a distinct string for title.    (Redundant as all titles are unique anyway but meh)
 : Our XML has an attribute called "song ref" that contains only the first character of every word in a song title. Finding that    will make a nicer looking TSV but for visualization purposes I'm not worried about that atm.:)
for $albumIndex in $distAlbums
let $songTitle := $discog//title[following-sibling::album = $albumIndex]/string() ! normalize-space()
let $distTitle := $songTitle => distinct-values()


(: Finds tempo elements where the preceding siblings match the album and title (which, again, is probably overkill for the context of the project but good practice in general) and returns the specific bpm attribute
 : One of the issues I had with this was looking through the wrong node for :)
for $titleIndex in $distTitle
let $songBPM := $discog//tempo[preceding-sibling::album = $albumIndex][preceding-sibling::title = $titleIndex]/@bpm ! string() ! normalize-space()
let $distBPM := $songBPM => distinct-values()

(: Finds other songs that match the tempo currently in the index. A not() operator is used to enusre the song doesn't match itself:)
for $bpmIndex in $distBPM
let $sharedBPM := $discog//title[not(. = $titleIndex)][following-sibling::tempo/@bpm=$bpmIndex[not(. = '1')]]

(: Loops for each instance of a shared bpm :)
for $sharedIndex in $sharedBPM

return string-join(($titleIndex,"in album:", $albumIndex, "Song's BPM:", $bpmIndex, "Shares with:", $sharedIndex), "&#x9;"), "&#10;");

let $fileName := "brandNewSharedTempo.tsv"
let $doc-db-uri := xmldb:store("/db/brandnew/TSV/", $fileName, $fileContent, "text/plain")
return $doc-db-uri 
(: Output at http://newtfire.org:8338/exist/rest/db/brandnew/TSV/brandNewSharedTempo.tsv :) 