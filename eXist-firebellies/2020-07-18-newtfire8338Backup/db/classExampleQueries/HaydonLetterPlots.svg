<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="1000" height="725" viewBox="0,0,1500,1087.5"><!--VIEWPORT AND VIEWBOX: After finishing the graph, I went back to tinker with the viewport and viewbox to control the aspect ratio, how the numbers we're using in the SVG respond on a screen. We'll discuss how this works in class, but briefly:
width="{my largest X value for the ENTIRE plot + something with some wiggle room}" 
height="{my largest Y for the ENTIRE plot} + wiggle room}"
I can just plug these in, as I'm doing the "Y" value, based on the numbers I'm generating as my graph's output. 275 was the transform/translate value I used for my 2nd (ribbon) graph (that value was $graph2_Ytranslate), and I just looked at my highest value of "Y" in that graph, and guesstimated something a little larger than that to add to it. The values here, without units, are called "user units" and are defined in "user space".
Now, if I want to define how the image behaves on a screen, I define the viewBox attribute. viewBox takes four values:
viewBox="(x1,y1,x2,y2)" which define a new coordinate system to use in rendering our output image. 
x1,y1 defines starting top-left part of the image, and x2,y2 defines the number that represents the bottom right of the user's screen. 
If x1,y1 does not start at 0,0 it'll select the part of your image that starts where you say as the top left of the viewable SVG. (Notice what happens to the output SVG if you set x1,y1 to 200,200)
If x2,y2 is SMALLER than the total width and height you defined for your image, you'll be zooming and cropping, because the viewBox defines what you can see on the visible screen. (Notice what happens if set x2,y2 to the width div 2 and height div 2).
If the x2,y2 is LARGER than the total width and height, the result effectively zooms out, making the output image take up LESS space on the screen. Think of x2,y2 as defining a ratio with your width and height. 
--><g transform="translate(30, 110)"><text x="450" y="-90" style="text-anchor: middle">Haydon's letters to Mitford per Year, Output like a Bar Graph</text><line x1="100" x2="900" y1="0" y2="0" style="stroke:black;"/><g><rect x="100" y="-0" height="0" width="25" style="stroke:#006600; fill: #00cc00"/><!--ebb: I decided I wanted to SUPPRESS any counts when they were zero because the 0's along the bar seemed unnecessary and cluttered. I did that with a tiny internal FLWOR so I could use a **where** statement just for the SVG text element in my output:--><text x="100" y="20">1818</text></g><g><rect x="200" y="-20" height="20" width="25" style="stroke:#006600; fill: #00cc00"/><!--ebb: I decided I wanted to SUPPRESS any counts when they were zero because the 0's along the bar seemed unnecessary and cluttered. I did that with a tiny internal FLWOR so I could use a **where** statement just for the SVG text element in my output:--><text x="212.5" y="-10" style="text-anchor: middle; font-size: 12px;">2</text><text x="200" y="20">1819</text></g><g><rect x="300" y="-60" height="60" width="25" style="stroke:#006600; fill: #00cc00"/><!--ebb: I decided I wanted to SUPPRESS any counts when they were zero because the 0's along the bar seemed unnecessary and cluttered. I did that with a tiny internal FLWOR so I could use a **where** statement just for the SVG text element in my output:--><text x="312.5" y="-30" style="text-anchor: middle; font-size: 12px;">6</text><text x="300" y="20">1820</text></g><g><rect x="400" y="-40" height="40" width="25" style="stroke:#006600; fill: #00cc00"/><!--ebb: I decided I wanted to SUPPRESS any counts when they were zero because the 0's along the bar seemed unnecessary and cluttered. I did that with a tiny internal FLWOR so I could use a **where** statement just for the SVG text element in my output:--><text x="412.5" y="-20" style="text-anchor: middle; font-size: 12px;">4</text><text x="400" y="20">1821</text></g><g><rect x="500" y="-0" height="0" width="25" style="stroke:#006600; fill: #00cc00"/><!--ebb: I decided I wanted to SUPPRESS any counts when they were zero because the 0's along the bar seemed unnecessary and cluttered. I did that with a tiny internal FLWOR so I could use a **where** statement just for the SVG text element in my output:--><text x="500" y="20">1822</text></g><g><rect x="600" y="-30" height="30" width="25" style="stroke:#006600; fill: #00cc00"/><!--ebb: I decided I wanted to SUPPRESS any counts when they were zero because the 0's along the bar seemed unnecessary and cluttered. I did that with a tiny internal FLWOR so I could use a **where** statement just for the SVG text element in my output:--><text x="612.5" y="-15" style="text-anchor: middle; font-size: 12px;">3</text><text x="600" y="20">1823</text></g><g><rect x="700" y="-0" height="0" width="25" style="stroke:#006600; fill: #00cc00"/><!--ebb: I decided I wanted to SUPPRESS any counts when they were zero because the 0's along the bar seemed unnecessary and cluttered. I did that with a tiny internal FLWOR so I could use a **where** statement just for the SVG text element in my output:--><text x="700" y="20">1824</text></g><g><rect x="800" y="-0" height="0" width="25" style="stroke:#006600; fill: #00cc00"/><!--ebb: I decided I wanted to SUPPRESS any counts when they were zero because the 0's along the bar seemed unnecessary and cluttered. I did that with a tiny internal FLWOR so I could use a **where** statement just for the SVG text element in my output:--><text x="800" y="20">1825</text></g></g><!-- ebb: Next, I'm just making a second version of the graph here with a new FLWOR. I added a new variable to shorten the distance between years so my graph doesn't take up so much space.--><!--ebb: In the SVG elements below, I'm reversing x's and y's and heights vs. widths from the FLWOR above. Since we are plotting **downwards** along the vertical ribbon, we don't need to make y's negative here! I'm also making adjustments to plot the rectangles so they center on the ribbon. The $centeredHeading Global Variable gives me a midpoint on which to plot the line and all the X values I'd like to appear centered along it. If I'm centering a rectangle, I subtract half the width of a rectangle from that midpoint to determine the x position of the rectangle.--><g transform="translate(30, 275)"><text x="450" y="-45" style="text-anchor: middle">Haydon's letters to Mitford per Year, Output Vertically and Centered on a Ribbon</text><line y1="0" y2="400" x1="450" x2="450" style="stroke:navy; stroke-width:15"/><g><rect y="50" x="450" width="0" height="25" style="stroke:#006600; fill: #FFD700"/></g><g><rect y="100" x="440" width="20" height="25" style="stroke:#006600; fill: #FFD700"/><g><text y="116.666666666666666667" x="450" style="text-anchor: middle; font-size: 12px;">2</text><text y="116.666666666666666667" x="375">1819</text></g></g><g><rect y="150" x="420" width="60" height="25" style="stroke:#006600; fill: #FFD700"/><g><text y="166.666666666666666667" x="450" style="text-anchor: middle; font-size: 12px;">6</text><text y="166.666666666666666667" x="375">1820</text></g></g><g><rect y="200" x="430" width="40" height="25" style="stroke:#006600; fill: #FFD700"/><g><text y="216.666666666666666667" x="450" style="text-anchor: middle; font-size: 12px;">4</text><text y="216.666666666666666667" x="375">1821</text></g></g><g><rect y="250" x="450" width="0" height="25" style="stroke:#006600; fill: #FFD700"/></g><g><rect y="300" x="435" width="30" height="25" style="stroke:#006600; fill: #FFD700"/><g><text y="316.666666666666666667" x="450" style="text-anchor: middle; font-size: 12px;">3</text><text y="316.666666666666666667" x="375">1823</text></g></g><g><rect y="350" x="450" width="0" height="25" style="stroke:#006600; fill: #FFD700"/></g><g><rect y="400" x="450" width="0" height="25" style="stroke:#006600; fill: #FFD700"/></g></g></svg>